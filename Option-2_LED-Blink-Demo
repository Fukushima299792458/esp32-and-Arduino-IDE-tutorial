// This defines the variable "RGB_red" as 2, D2, or pin 2, and can be referenced later so you don't have to remember which pin the LED is attached to.
#define RGB_red 2

// Self-explanatory, this is the code you want to run when setting up before the first "frame" or "loop()" function runs.
void setup() {
  //This tells the esp32 to set the serial connection to a baud rate of 115200. This allows the esp32 to communicate with your computer, the outputs can be viewed by opening the serial monitor or by pressing ctrl+shift+m, then setting the baud rate in the top right-hand corner of the serial monitor to the same baud rate as the esp32 is set to in the following line.
  Serial.begin(2000000);

  // Each Serial.println(); adds a return element after the text so this line puts the next text on a new line. 
  Serial.println();
  // Declares that the esp32 is ready. 
  Serial.println("ready");

  // This references the previously set variable and tells the board that pin 2 is an output and should be treated as such. 
  pinMode(RGB_red, OUTPUT);
}

// This function runs repeatedly on a loop until the board is powered down so put the code you want to run continuously here.
void loop() {
  // This checks if there are any inputs from the computer's serial monitor (as typed in the input field across the top of the serial monitor).
  if (Serial.available()) {
    // Saves the input to a variable to remember later. 
    String input = Serial.readString();
    // Removes any \r \n whitespace at the end of the String i.e. characters that don't display but are added to the string and would disrupt the following if-else statement. 
    input.trim();
    // If there is an input from the serial monitor it reads the input and prints it on a new line to the serial monitor.
    Serial.println(input);
    // This checks the content of the input to see if it matches the preset commands i.e. "1" (turn on), "0" (turn off), "show" (put on a simple show), or anything else (print on a new line "this is not a valid command!"). 
    if (input == "1") {
      // Sets the referenced pin (pin 2) to the binary (on or off) "HIGH" which increases the voltage on the pin, in this case turning the LED on.
      digitalWrite(RGB_red, HIGH);
    } else if (input == "0") {
      // Sets the referenced pin (pin 2) to the binary (on or off) "LOW" which decreases the voltage on the pin, in this case turning the LED off.
      digitalWrite(RGB_red, LOW);
    } else if (input == "show") {
      // Sets the referenced pin (pin 2) to the analog ("any" number or any integer between 0 and 255) 0 which decreases how often the voltage is high on the pin to never, in this case turning the LED off.
      analogWrite(RGB_red, 0);
      // starts a for loop to repeat 255 times increasing i each time.
      for (int i = 0; i < 255; i++) {
        // Sets the referenced pin (pin 2) to the analog ("any" number or any integer between 0 and 255) integer variable i for each which increases how often the voltage is high on the pin.
        analogWrite(RGB_red, i);
        // Make the code wait before executing the next step. Subtracting i each time means that more and more time occurs between each iteration/light-brightness-level leading to a logarithmic brightening pattern. 
        delay((255 - i) / 10);
        // Prints the brightness to the serial monitor to make sure the code is working. 
        Serial.println(i);
      }
      // starts a for loop to repeat 255 times decreasing i each time.
      for (int i = 255; i > -1; i--) {
        // Sets the referenced pin (pin 2) to the analog ("any" number or any integer between 0 and 255) integer variable i for each which decreases how often the voltage is high on the pin.
        analogWrite(RGB_red, i);
        // Make the code wait before executing the next step. Subtracting i each time means that less and less time occurs between each iteration/light-brightness-level leading to an exponetial decay pattern. 
        delay((255 - i) / 10);
        // Prints the brightness to the serial monitor to make sure the code is working. 
        Serial.println(i);
      }
    } else {
      // If the input isn't a valid command this is printed to the serial manager.
      Serial.println("this is not a valid command!");
    }
  }
}
