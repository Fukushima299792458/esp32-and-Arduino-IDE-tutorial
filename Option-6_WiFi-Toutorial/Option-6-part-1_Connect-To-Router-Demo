// Include the WiFi library for WiFi functionality. 
#include <WiFi.h>

// Set network name.
const char* ssid = "Phoenixâ€™s iPhone";
// Set network password. 
const char* password = "nononono";


// Self-explanatory, this is the code you want to run when setting up before the first "frame" or "loop()" function runs.
void setup() {
  // This tells the esp32 to set the serial connection to a baud rate of 2000000. This allows the esp32 to communicate with your computer, the outputs can be viewed by opening the serial monitor or by pressing ctrl+shift+m, then setting the baud rate in the top right-hand corner of the serial monitor to the same baud rate as the esp32 is set to in the following line.
  Serial.begin(2000000);
  // Stall in a loop until serial port is ready. 
  while(!Serial) {}
  // Each Serial.println(); adds a return element after the text so this line puts the next text on a new line. 
  Serial.println();
  // Declares that the esp32 is ready. 
  Serial.println("ready");
  
  // Set the WiFi mode to station mode i.e. allows it to connect to and access point/router. 
  WiFi.mode(WIFI_STA);
  // Attempt to join the network. 
  WiFi.begin(ssid, password);
  // Announce connection status. 
  Serial.print("Connecting to WiFi..");
  // Repeat until connected to WiFi. 
  while (WiFi.status() != WL_CONNECTED) {
    // Add some delay so the processor isn't exessively overloaded. 
    delay(1000);
    // Print a dot every second to confirm the esp is checking for the network.  
    Serial.print(".");
    // If the network cannot be connected to then try again. 
    if (WiFi.status() == WL_CONNECT_FAILED) { 
      // Attempt to join the network again. 
      WiFi.begin(ssid, password);
      // Move to the next line.
      Serial.println();
      // Announce that the esp32 couldn't connect and is going to try to connect again.
      Serial.println("Failed, trying again..");
    }
  }

  // Each Serial.println(); adds a return element after the text so this line puts the next text on a new line. 
  Serial.println();

  // Announce connection status. 
  Serial.println("WiFi connected.");
}

// This function runs repeatedly on a loop until the board is powered down so put the code you want to run continuously here.
void loop() {
  // If the network connection is lost then try to reconnect. 
  if (WiFi.status() == 	WL_CONNECTION_LOST) { 
    // Attempt to join the network again. 
    WiFi.begin(ssid, password);
    // Move to the next line.
    Serial.println();
    // Announce that the esp32 lost the connection and is going to try to connect again.
    Serial.println("Connection failed, reconnect..");
    // Repeat until connected to WiFi. 
    while (WiFi.status() != WL_CONNECTED) {
      // Add some delay so the processor isn't exessively overloaded. 
      delay(1000);
      // Print a dot every second to confirm the esp is checking for the network.  
      Serial.print(".");
      // If the network cannot be connected to then try again. 
      if (WiFi.status() == WL_CONNECT_FAILED) { 
        // Attempt to join the network again. 
        WiFi.begin(ssid, password);
        // Move to the next line.
        Serial.println();
        // Announce that the esp32 couldn't connect and is going to try to connect again.
        Serial.println("Failed, trying again..");
      }
    }
  }
}
